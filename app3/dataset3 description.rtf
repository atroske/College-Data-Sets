{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs29\fsmilli14940 \cf2 \cb3 \expnd0\expndtw0\kerning0
Prompt: \
\pard\pardeftab720\partightenfactor0

\fs29\fsmilli14940 \cf2 \outl0\strokewidth0 \strokec2 Assume a new college that is expanding frequently and dramatically on its student amount. This leads to two consequences. First, accurately estimating the total number of students is\cf0 \strokec0  \cf2 \strokec2 extremely difficult. Second, frequent insertions and deletions are performed. In addition, the college frequently requires calculating the largest age gap among its students. Assume that search operations are not performed frequently. Your implementation has to support searches on either student ID or age. The major interfaces provided by your code should include createDataSet, destroyDataSet, searchAge, searchID, insertion, deletion, maxAgeGap.\

\fs29\fsmilli14940 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf2 Solution\
I used a list for this data set. I did this with a doubly linked list and dummy node. This is because we need to allocate dynamically as the college size keeps changing. Searching takes a long time O(n), however adding only takes O(1). And we would be adding more frequently. \
\
	Big O-runtimes: \
		Deletion: O(n). \
		Insertion: O(1)  \
		Search(ID orAGE): O(n) \
 		Destroy set O(n)  \
		Create set O(1)   \
		maxAgeGap: O(n)}