{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs29\fsmilli14940 \cf2 \cb3 \expnd0\expndtw0\kerning0
Prompt: \
Assume that the college takes very few transfer students and has most of its students stay for at\cf0  \cf2 least one year (Hints: no frequent insertion and deletion operations). And the maximum student number is given. But it does require a lot of search operations. Specifically, all of the searches are based on student IDs. The major interfaces provided by your code should include createDataSet, destroyDataSet, searchID, insertion, deletion.\
\
Solution\
I choose to use a set, implemented with 3 parallel arrays. One holds a flag to make probing more efficient, and the other two hold the id number and age . I used linear probing because of the lab document, which gives me a worst case big O(n). But the expected case would be O(1). Hash tables are most useful when there isn't frequent deletion which is the case here. \
\
	Big O-runtimes: \
		Deletion: O(n). \
		Insertion: O(n)  \
		Search: O(n) (expected O(1) for each)			\
		Destroy set O(n)  \
		Create set O(1)}